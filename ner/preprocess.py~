"""
The file preprocesses the files/train.txt and files/test.txt files.

I requires the dependency based embeddings by Levy et al.. Download them from his website and change 
the embeddingsPath variable in the script to point to the unzipped deps.words file.
"""
from __future__ import print_function
import numpy as np
import gzip
import os
import sys
if (sys.version_info > (3, 0)):
    import pickle as pkl
else: #Python 2.7 imports
    import cPickle as pkl

#outputFilePath = 'pkl/sem-relations.pkl.gz'

outputFilePath='ADE-corpus/'
#We download English word embeddings from here https://www.cs.york.ac.uk/nlp/extvec/
embeddingsPath = 'embeddings/wiki_extvec.gz'


folder = 'ADE-corpus/'
files = [folder+'train.txt', folder+'test.txt']

#Mapping of the labels to integers
'''
labelsMapping = {'Other':0, 
                 'Message-Topic(e1,e2)':1, 'Message-Topic(e2,e1)':2, 
                 'Product-Producer(e1,e2)':3, 'Product-Producer(e2,e1)':4, 
                 'Instrument-Agency(e1,e2)':5, 'Instrument-Agency(e2,e1)':6, 
                 'Entity-Destination(e1,e2)':7, 'Entity-Destination(e2,e1)':8,
                 'Cause-Effect(e1,e2)':9, 'Cause-Effect(e2,e1)':10,
                 'Component-Whole(e1,e2)':11, 'Component-Whole(e2,e1)':12,  
                 'Entity-Origin(e1,e2)':13, 'Entity-Origin(e2,e1)':14,
                 'Member-Collection(e1,e2)':15, 'Member-Collection(e2,e1)':16,
                 'Content-Container(e1,e2)':17, 'Content-Container(e2,e1)':18}
'''
'''
labelsMapping = {'/sports/sports_team/location(e1,e2)': 0,
                     '/business/company/major_shareholders(e1,e2)': 1,
                     '/people/ethnicity/geographic_distribution(e1,e2)': 2,
                     '/business/company/place_founded(e1,e2)': 3,
                     '/people/person/children(e1,e2)': 4,
                     '/location/us_state/capital(e1,e2)': 5,
                     '/business/company/founders(e1,e2)': 6,
                     '/location/neighborhood/neighborhood_of(e1,e2)': 7,
                     '/people/person/place_of_birth(e1,e2)': 8,
                     '/location/administrative_division/country(e1,e2)': 9,
                     '/people/person/nationality(e1,e2)': 10,
                     '/location/country/administrative_divisions(e1,e2)': 11,
                     '/business/person/company(e1,e2)': 12,
                     '/people/person/place_lived(e1,e2)': 13,
                     '/location/country/capital(e1,e2)': 14,
                     '/location/location/contains(e1,e2)': 15}

'''

labelsMapping={'DRUG-DOSE':0,'DRUG-AE':1}

#labelsMapping={'P92(e1,e2)': 0, 'P1038(e1,e2)': 1, 'P1050(e1,e2)': 2, 'P1412(e1,e2)': 3, 'P1414(e1,e2)': 4, 'P2578(e1,e2)': 5, 'P1408(e1,e2)': 6, 'P131(e1,e2)': 7, 'P119(e1,e2)': 8, 'P190(e1,e2)': 9, 'P178(e1,e2)': 10, 'P366(e1,e2)': 11, 'P1420(e1,e2)': 12, 'P306(e1,e2)': 13, 'P170(e1,e2)': 14, 'P726(e1,e2)': 15, 'P2079(e1,e2)': 16, 'P1064(e1,e2)': 17, 'P1365(e1,e2)': 18, 'P931(e1,e2)': 19, 'P641(e1,e2)': 20, 'P177(e1,e2)': 21, 'P708(e1,e2)': 22, 'P287(e1,e2)': 23, 'P1327(e1,e2)': 24, 'P58(e1,e2)': 25, 'P500(e1,e2)': 26, 'P647(e1,e2)': 27, 'P571(e1,e2)': 28, 'P1072(e1,e2)': 29, 'P941(e1,e2)': 30, 'P186(e1,e2)': 31, 'P1071(e1,e2)': 32, 'P183(e1,e2)': 33, 'P410(e1,e2)': 34, 'P272(e1,e2)': 35, 'P134(e1,e2)': 36, 'P570(e1,e2)': 37, 'P463(e1,e2)': 38, 'P1416(e1,e2)': 39, 'P1027(e1,e2)': 40, 'P1302(e1,e2)': 41, 'P937(e1,e2)': 42, 'P1382(e1,e2)': 43, 'P991(e1,e2)': 44, 'P149(e1,e2)': 45, 'P1547(e1,e2)': 46, 'P135(e1,e2)': 47, 'P1455(e1,e2)': 48, 'P611(e1,e2)': 49, 'P199(e1,e2)': 50, 'P31(e1,e2)': 51, 'P1962(e1,e2)': 52, 'P25(e1,e2)': 53, 'P123(e1,e2)': 54, 'P620(e1,e2)': 55, 'P2512(e1,e2)': 56, 'P610(e1,e2)': 57, 'P1268(e1,e2)': 58, 'P179(e1,e2)': 59, 'P541(e1,e2)': 60, 'P102(e1,e2)': 61, 'P706(e1,e2)': 62, 'P264(e1,e2)': 63, 'P59(e1,e2)': 64, 'P1049(e1,e2)': 65, 'P681(e1,e2)': 66, 'P1622(e1,e2)': 67, 'P175(e1,e2)': 68, 'P1249(e1,e2)': 69, 'P1433(e1,e2)': 70, 'P452(e1,e2)': 71, 'P1165(e1,e2)': 72, 'P684(e1,e2)': 73, 'P822(e1,e2)': 74, 'P1582(e1,e2)': 75, 'P121(e1,e2)': 76, 'P2389(e1,e2)': 77, 'P205(e1,e2)': 78, 'P1434(e1,e2)': 79, 'P1269(e1,e2)': 80, 'P1181(e1,e2)': 81, 'P2289(e1,e2)': 82, 'P1383(e1,e2)': 83, 'P870(e1,e2)': 84, 'P1478(e1,e2)': 85, 'P413(e1,e2)': 86, 'P91(e1,e2)': 87, 'P2155(e1,e2)': 88, 'P607(e1,e2)': 89, 'P27(e1,e2)': 90, 'P1057(e1,e2)': 91, 'P559(e1,e2)': 92, 'P200(e1,e2)': 93, 'P159(e1,e2)': 94, 'P47(e1,e2)': 95, 'P618(e1,e2)': 96, 'P53(e1,e2)': 97, 'P88(e1,e2)': 98, 'P39(e1,e2)': 99, 'P157(e1,e2)': 100, 'P35(e1,e2)': 101, 'P1435(e1,e2)': 102, 'P112(e1,e2)': 103, 'P629(e1,e2)': 104, 'P1081(e1,e2)': 105, 'P1906(e1,e2)': 106, 'P1344(e1,e2)': 107, 'P674(e1,e2)': 108, 'P85(e1,e2)': 109, 'P1811(e1,e2)': 110, 'P6(e1,e2)': 111, 'P609(e1,e2)': 112, 'P108(e1,e2)': 113, 'P406(e1,e2)': 114, 'P360(e1,e2)': 115, 'P286(e1,e2)': 116, 'P425(e1,e2)': 117, 'P103(e1,e2)': 118, 'P737(e1,e2)': 119, 'P437(e1,e2)': 120, 'P689(e1,e2)': 121, 'P1317(e1,e2)': 122, 'P885(e1,e2)': 123, 'P2596(e1,e2)': 124, 'P730(e1,e2)': 125, 'P945(e1,e2)': 126, 'P2546(e1,e2)': 127, 'P1889(e1,e2)': 128, 'P411(e1,e2)': 129, 'P1322(e1,e2)': 130, 'P658(e1,e2)': 131, 'P7(e1,e2)': 132, 'P2286(e1,e2)': 133, 'P1308(e1,e2)': 134, 'P1313(e1,e2)': 135, 'P1875(e1,e2)': 136, 'P1535(e1,e2)': 137, 'P2152(e1,e2)': 138, 'P140(e1,e2)': 139, 'P1303(e1,e2)': 140, 'P2184(e1,e2)': 141, 'P669(e1,e2)': 142, 'P517(e1,e2)': 143, 'P408(e1,e2)': 144, 'P512(e1,e2)': 145, 'P2632(e1,e2)': 146, 'P407(e1,e2)': 147, 'P2341(e1,e2)': 148, 'P427(e1,e2)': 149, 'P84(e1,e2)': 150, 'P371(e1,e2)': 151, 'P19(e1,e2)': 152, 'P2633(e1,e2)': 153, 'P161(e1,e2)': 154, 'P277(e1,e2)': 155, 'P451(e1,e2)': 156, 'P87(e1,e2)': 157, 'P26(e1,e2)': 158, 'P415(e1,e2)': 159, 'P2541(e1,e2)': 160, 'P111(e1,e2)': 161, 'P1018(e1,e2)': 162, 'P16(e1,e2)': 163, 'P1557(e1,e2)': 164, 'P400(e1,e2)': 165, 'P748(e1,e2)': 166, 'P553(e1,e2)': 167, 'P275(e1,e2)': 168, 'P1346(e1,e2)': 169, 'P880(e1,e2)': 170, 'P155(e1,e2)': 171, 'P765(e1,e2)': 172, 'P150(e1,e2)': 173, 'P1429(e1,e2)': 174, 'P800(e1,e2)': 175, 'P97(e1,e2)': 176, 'P676(e1,e2)': 177, 'P208(e1,e2)': 178, 'P276(e1,e2)': 179, 'P826(e1,e2)': 180, 'P725(e1,e2)': 181, 'P184(e1,e2)': 182, 'P144(e1,e2)': 183, 'P263(e1,e2)': 184, 'P1885(e1,e2)': 185, 'P516(e1,e2)': 186, 'P127(e1,e2)': 187, 'P530(e1,e2)': 188, 'P86(e1,e2)': 189, 'P469(e1,e2)': 190, 'P913(e1,e2)': 191, 'P1995(e1,e2)': 192, 'P364(e1,e2)': 193, 'P403(e1,e2)': 194, 'P163(e1,e2)': 195, 'P466(e1,e2)': 196, 'P50(e1,e2)': 197, 'P1040(e1,e2)': 198, 'P533(e1,e2)': 199, 'P57(e1,e2)': 200, 'P1571(e1,e2)': 201, 'P1399(e1,e2)': 202, 'P523(e1,e2)': 203, 'P575(e1,e2)': 204, 'P1389(e1,e2)': 205, 'P237(e1,e2)': 206, 'P195(e1,e2)': 207, 'P449(e1,e2)': 208, 'P790(e1,e2)': 209, 'P832(e1,e2)': 210, 'P38(e1,e2)': 211, 'P30(e1,e2)': 212, 'P793(e1,e2)': 213, 'P2348(e1,e2)': 214, 'P460(e1,e2)': 215, 'P69(e1,e2)': 216, 'P1142(e1,e2)': 217, 'P2670(e1,e2)': 218, 'P110(e1,e2)': 219, 'P194(e1,e2)': 220, 'P729(e1,e2)': 221, 'P176(e1,e2)': 222, 'P750(e1,e2)': 223, 'P114(e1,e2)': 224, 'P485(e1,e2)': 225, 'P1192(e1,e2)': 226, 'P397(e1,e2)': 227, 'P1531(e1,e2)': 228, 'P1574(e1,e2)': 229, 'P915(e1,e2)': 230, 'P54(e1,e2)': 231, 'P769(e1,e2)': 232, 'P1363(e1,e2)': 233, 'P417(e1,e2)': 234, 'P113(e1,e2)': 235, 'P495(e1,e2)': 236, 'P126(e1,e2)': 237, 'P828(e1,e2)': 238, 'P282(e1,e2)': 239, 'P1196(e1,e2)': 240, 'P825(e1,e2)': 241, 'P450(e1,e2)': 242, 'P412(e1,e2)': 243, 'P788(e1,e2)': 244, 'P414(e1,e2)': 245, 'P201(e1,e2)': 246, 'P831(e1,e2)': 247, 'P20(e1,e2)': 248, 'P2098(e1,e2)': 249, 'P40(e1,e2)': 250, 'P734(e1,e2)': 251, 'P509(e1,e2)': 252, 'P1619(e1,e2)': 253, 'P1158(e1,e2)': 254, 'P551(e1,e2)': 255, 'P655(e1,e2)': 256, 'P279(e1,e2)': 257, 'P21(e1,e2)': 258, 'P1654(e1,e2)': 259, 'P1851(e1,e2)': 260, 'P1589(e1,e2)': 261, 'P421(e1,e2)': 262, 'P206(e1,e2)': 263, 'P664(e1,e2)': 264, 'P1731(e1,e2)': 265, 'P921(e1,e2)': 266, 'P1891(e1,e2)': 267, 'P166(e1,e2)': 268, 'P768(e1,e2)': 269, 'P136(e1,e2)': 270, 'P37(e1,e2)': 271, 'P2416(e1,e2)': 272, 'P1431(e1,e2)': 273, 'P1336(e1,e2)': 274, 'P1809(e1,e2)': 275, 'P688(e1,e2)': 276, 'P1001(e1,e2)': 277, 'P569(e1,e2)': 278, 'P807(e1,e2)': 279, 'P98(e1,e2)': 280, 'P567(e1,e2)': 281, 'P972(e1,e2)': 282, 'P767(e1,e2)': 283, 'P740(e1,e2)': 284, 'P1560(e1,e2)': 285, 'P547(e1,e2)': 286, 'P189(e1,e2)': 287, 'P840(e1,e2)': 288, 'P577(e1,e2)': 289, 'P462(e1,e2)': 290, 'P2293(e1,e2)': 291, 'P122(e1,e2)': 292, 'P612(e1,e2)': 293, 'P141(e1,e2)': 294, 'P197(e1,e2)': 295, 'P172(e1,e2)': 296, 'P1990(e1,e2)': 297, 'P735(e1,e2)': 298, 'P1462(e1,e2)': 299, 'P1312(e1,e2)': 300, 'P376(e1,e2)': 301, 'P868(e1,e2)': 302, 'P504(e1,e2)': 303, 'P2505(e1,e2)': 304, 'P17(e1,e2)': 305, 'P209(e1,e2)': 306, 'P81(e1,e2)': 307, 'P461(e1,e2)': 308, 'P619(e1,e2)': 309, 'P0(e1,e2)': 310, 'P399(e1,e2)': 311, 'P1068(e1,e2)': 312, 'P169(e1,e2)': 313, 'P457(e1,e2)': 314, 'P1191(e1,e2)': 315, 'P196(e1,e2)': 316, 'P289(e1,e2)': 317, 'P106(e1,e2)': 318, 'P9(e1,e2)': 319, 'P180(e1,e2)': 320, 'P770(e1,e2)': 321, 'P138(e1,e2)': 322, 'P780(e1,e2)': 323, 'P101(e1,e2)': 324, 'P1074(e1,e2)': 325, 'P467(e1,e2)': 326, 'P241(e1,e2)': 327, 'P66(e1,e2)': 328, 'P355(e1,e2)': 329, 'P115(e1,e2)': 330, 'P22(e1,e2)': 331, 'P344(e1,e2)': 332, 'P1411(e1,e2)': 333, 'P562(e1,e2)': 334, 'P1552(e1,e2)': 335, 'P1532(e1,e2)': 336, 'P118(e1,e2)': 337, 'P1056(e1,e2)': 338, 'P291(e1,e2)': 339, 'P375(e1,e2)': 340, 'P36(e1,e2)': 341, 'P802(e1,e2)': 342, 'P703(e1,e2)': 343, 'P1479(e1,e2)': 344, 'P162(e1,e2)': 345, 'P522(e1,e2)': 346, 'P1080(e1,e2)': 347, 'P927(e1,e2)': 348, 'P361(e1,e2)': 349, 'P501(e1,e2)': 350, 'P61(e1,e2)': 351}

#4feb2019#labelsMapping = {'P131(e1,e2)': 0, 'P658(e1,e2)': 1, 'P1479(e1,e2)': 2, 'P1429(e1,e2)': 3, 'P140(e1,e2)': 4, 'P611(e1,e2)': 5, 'P915(e1,e2)': 6, 'P289(e1,e2)': 7, 'P669(e1,e2)': 8, 'P2578(e1,e2)': 9, 'P1081(e1,e2)': 10, 'P135(e1,e2)': 11, 'P449(e1,e2)': 12, 'P880(e1,e2)': 13, 'P1192(e1,e2)': 14, 'P413(e1,e2)': 15, 'P512(e1,e2)': 16, 'C1(e1,e2)': 17, 'P163(e1,e2)': 18, 'P47(e1,e2)': 19, 'P466(e1,e2)': 20, 'P21(e1,e2)': 21, 'P2670(e1,e2)': 22, 'P376(e1,e2)': 23, 'P189(e1,e2)': 24, 'P553(e1,e2)': 25, 'P500(e1,e2)': 26, 'P788(e1,e2)': 27, 'P2389(e1,e2)': 28, 'P272(e1,e2)': 29, 'P54(e1,e2)': 30, 'P868(e1,e2)': 31, 'P1072(e1,e2)': 32, 'P178(e1,e2)': 33, 'P27(e1,e2)': 34, 'P1071(e1,e2)': 35, 'P37(e1,e2)': 36, 'P1531(e1,e2)': 37, 'P1906(e1,e2)': 38, 'P35(e1,e2)': 39, 'P121(e1,e2)': 40, 'P0(e1,e2)': 41, 'P1142(e1,e2)': 42, 'P2152(e1,e2)': 43, 'P461(e1,e2)': 44, 'P570(e1,e2)': 45, 'P735(e1,e2)': 46, 'P411(e1,e2)': 47, 'P504(e1,e2)': 48, 'P57(e1,e2)': 49, 'P1382(e1,e2)': 50, 'P287(e1,e2)': 51, 'P106(e1,e2)': 52, 'P567(e1,e2)': 53, 'P2348(e1,e2)': 54, 'P134(e1,e2)': 55, 'P790(e1,e2)': 56, 'P81(e1,e2)': 57, 'P523(e1,e2)': 58, 'P509(e1,e2)': 59, 'P425(e1,e2)': 60, 'P991(e1,e2)': 61, 'P366(e1,e2)': 62, 'P1399(e1,e2)': 63, 'P467(e1,e2)': 64, 'P1269(e1,e2)': 65, 'P184(e1,e2)': 66, 'P91(e1,e2)': 67, 'P144(e1,e2)': 68, 'P450(e1,e2)': 69, 'P1582(e1,e2)': 70, 'P780(e1,e2)': 71, 'P399(e1,e2)': 72, 'P166(e1,e2)': 73, 'P169(e1,e2)': 74, 'P406(e1,e2)': 75, 'P2505(e1,e2)': 76, 'P306(e1,e2)': 77, 'P2596(e1,e2)': 78, 'P159(e1,e2)': 79, 'P726(e1,e2)': 80, 'P547(e1,e2)': 81, 'P706(e1,e2)': 82, 'P361(e1,e2)': 83, 'P703(e1,e2)': 84, 'P460(e1,e2)': 85, 'P469(e1,e2)': 86, 'P1050(e1,e2)': 87, 'P170(e1,e2)': 88, 'P1365(e1,e2)': 89, 'P750(e1,e2)': 90, 'P708(e1,e2)': 91, 'P183(e1,e2)': 92, 'P206(e1,e2)': 93, 'P276(e1,e2)': 94, 'P157(e1,e2)': 95, 'P1158(e1,e2)': 96, 'P1056(e1,e2)': 97, 'P1478(e1,e2)': 98, 'P123(e1,e2)': 99, 'P1619(e1,e2)': 100, 'P2155(e1,e2)': 101, 'P437(e1,e2)': 102, 'P1165(e1,e2)': 103, 'P1313(e1,e2)': 104, 'P138(e1,e2)': 105, 'P768(e1,e2)': 106, 'P412(e1,e2)': 107, 'P676(e1,e2)': 108, 'P1344(e1,e2)': 109, 'P1995(e1,e2)': 110, 'P1064(e1,e2)': 111, 'P199(e1,e2)': 112, 'P1962(e1,e2)': 113, 'P190(e1,e2)': 114, 'P2289(e1,e2)': 115, 'P186(e1,e2)': 116, 'P562(e1,e2)': 117, 'P277(e1,e2)': 118, 'P569(e1,e2)': 119, 'P286(e1,e2)': 120, 'P737(e1,e2)': 121, 'P517(e1,e2)': 122, 'P1312(e1,e2)': 123, 'P1040(e1,e2)': 124, 'P770(e1,e2)': 125, 'P119(e1,e2)': 126, 'P149(e1,e2)': 127, 'P1434(e1,e2)': 128, 'P647(e1,e2)': 129, 'P1302(e1,e2)': 130, 'P84(e1,e2)': 131, 'P740(e1,e2)': 132, 'P1181(e1,e2)': 133, 'P1416(e1,e2)': 134, 'P208(e1,e2)': 135, 'P831(e1,e2)': 136, 'P98(e1,e2)': 137, 'P1420(e1,e2)': 138, 'P1431(e1,e2)': 139, 'P101(e1,e2)': 140, 'P629(e1,e2)': 141, 'P1322(e1,e2)': 142, 'P407(e1,e2)': 143, 'P734(e1,e2)': 144, 'P291(e1,e2)': 145, 'P126(e1,e2)': 146, 'P17(e1,e2)': 147, 'P1411(e1,e2)': 148, 'P85(e1,e2)': 149, 'P1268(e1,e2)': 150, 'P1731(e1,e2)': 151, 'P1532(e1,e2)': 152, 'P58(e1,e2)': 153, 'P355(e1,e2)': 154, 'P541(e1,e2)': 155, 'P127(e1,e2)': 156, 'P375(e1,e2)': 157, 'P619(e1,e2)': 158, 'P38(e1,e2)': 159, 'P403(e1,e2)': 160, 'P2512(e1,e2)': 161, 'P559(e1,e2)': 162, 'P1027(e1,e2)': 163, 'P501(e1,e2)': 164, 'P913(e1,e2)': 165, 'C2(e1,e2)': 166, 'P175(e1,e2)': 167, 'P194(e1,e2)': 168, 'P610(e1,e2)': 169, 'P2098(e1,e2)': 170, 'P1408(e1,e2)': 171, 'P729(e1,e2)': 172, 'P180(e1,e2)': 173, 'P1317(e1,e2)': 174, 'P1068(e1,e2)': 175, 'P825(e1,e2)': 176, 'P112(e1,e2)': 177, 'P1455(e1,e2)': 178, 'P551(e1,e2)': 179, 'P2632(e1,e2)': 180, 'P822(e1,e2)': 181, 'P1249(e1,e2)': 182, 'P688(e1,e2)': 183, 'P408(e1,e2)': 184, 'P92(e1,e2)': 185, 'P150(e1,e2)': 186, 'P612(e1,e2)': 187, 'P1990(e1,e2)': 188, 'P767(e1,e2)': 189, 'P2286(e1,e2)': 190, 'P495(e1,e2)': 191, 'P136(e1,e2)': 192, 'P1074(e1,e2)': 193, 'P530(e1,e2)': 194, 'P155(e1,e2)': 195, 'P870(e1,e2)': 196, 'P2416(e1,e2)': 197, 'P945(e1,e2)': 198, 'P2079(e1,e2)': 199, 'P400(e1,e2)': 200, 'P516(e1,e2)': 201, 'P1346(e1,e2)': 202, 'P196(e1,e2)': 203, 'P730(e1,e2)': 204, 'P172(e1,e2)': 205, 'P282(e1,e2)': 206, 'P20(e1,e2)': 207, 'P1889(e1,e2)': 208, 'P87(e1,e2)': 209, 'P941(e1,e2)': 210, 'P115(e1,e2)': 211, 'P114(e1,e2)': 212, 'P769(e1,e2)': 213, 'P826(e1,e2)': 214, 'P609(e1,e2)': 215, 'P1001(e1,e2)': 216, 'P88(e1,e2)': 217, 'P414(e1,e2)': 218, 'P655(e1,e2)': 219, 'P1851(e1,e2)': 220, 'P2541(e1,e2)': 221, 'P1363(e1,e2)': 222, 'P577(e1,e2)': 223, 'P684(e1,e2)': 224, 'P66(e1,e2)': 225, 'P263(e1,e2)': 226, 'P1875(e1,e2)': 227, 'P50(e1,e2)': 228, 'P921(e1,e2)': 229, 'P620(e1,e2)': 230, 'P1885(e1,e2)': 231, 'P2633(e1,e2)': 232, 'P1809(e1,e2)': 233, 'P1589(e1,e2)': 234, 'P807(e1,e2)': 235, 'P748(e1,e2)': 236, 'P61(e1,e2)': 237, 'P1557(e1,e2)': 238, 'P197(e1,e2)': 239, 'P1191(e1,e2)': 240, 'P1654(e1,e2)': 241, 'P885(e1,e2)': 242, 'P1891(e1,e2)': 243, 'P1327(e1,e2)': 244, 'P344(e1,e2)': 245, 'P828(e1,e2)': 246, 'P110(e1,e2)': 247, 'P452(e1,e2)': 248, 'P36(e1,e2)': 249, 'P832(e1,e2)': 250, 'P1383(e1,e2)': 251, 'P427(e1,e2)': 252, 'P122(e1,e2)': 253, 'P1308(e1,e2)': 254, 'P1433(e1,e2)': 255, 'P241(e1,e2)': 256, 'P111(e1,e2)': 257, 'P840(e1,e2)': 258, 'P141(e1,e2)': 259, 'P209(e1,e2)': 260, 'P1057(e1,e2)': 261, 'P2293(e1,e2)': 262, 'P1018(e1,e2)': 263, 'P1303(e1,e2)': 264, 'P103(e1,e2)': 265, 'P618(e1,e2)': 266, 'P6(e1,e2)': 267, 'P931(e1,e2)': 268, 'P162(e1,e2)': 269, 'P571(e1,e2)': 270, 'P59(e1,e2)': 271, 'P108(e1,e2)': 272, 'P765(e1,e2)': 273, 'P1811(e1,e2)': 274, 'P575(e1,e2)': 275, 'P1336(e1,e2)': 276, 'P802(e1,e2)': 277, 'P205(e1,e2)': 278, 'P415(e1,e2)': 279, 'P485(e1,e2)': 280, 'C3(e1,e2)': 281, 'P371(e1,e2)': 282, 'P1622(e1,e2)': 283, 'P410(e1,e2)': 284, 'P421(e1,e2)': 285, 'P39(e1,e2)': 286, 'P1038(e1,e2)': 287, 'P195(e1,e2)': 288, 'P397(e1,e2)': 289, 'P607(e1,e2)': 290, 'P641(e1,e2)': 291, 'P681(e1,e2)': 292, 'P113(e1,e2)': 293, 'P463(e1,e2)': 294, 'P1535(e1,e2)': 295, 'P179(e1,e2)': 296, 'P800(e1,e2)': 297, 'P118(e1,e2)': 298, 'P533(e1,e2)': 299, 'P457(e1,e2)': 300, 'P1574(e1,e2)': 301, 'P279(e1,e2)': 302, 'P201(e1,e2)': 303, 'P1547(e1,e2)': 304, 'P177(e1,e2)': 305, 'P1552(e1,e2)': 306, 'P793(e1,e2)': 307, 'P2184(e1,e2)': 308, 'P102(e1,e2)': 309, 'P275(e1,e2)': 310, 'P462(e1,e2)': 311, 'P725(e1,e2)': 312, 'P97(e1,e2)': 313, 'P360(e1,e2)': 314, 'P1196(e1,e2)': 315, 'P451(e1,e2)': 316, 'P1571(e1,e2)': 317, 'P1080(e1,e2)': 318, 'P1462(e1,e2)': 319, 'P176(e1,e2)': 320, 'P417(e1,e2)': 321, 'P19(e1,e2)': 322, 'P522(e1,e2)': 323, 'P264(e1,e2)': 324, 'P1435(e1,e2)': 325, 'P1049(e1,e2)': 326, 'P16(e1,e2)': 327, 'P200(e1,e2)': 328, 'P1389(e1,e2)': 329, 'P53(e1,e2)': 330, 'P664(e1,e2)': 331, 'P2546(e1,e2)': 332, 'P689(e1,e2)': 333, 'P937(e1,e2)': 334, 'P237(e1,e2)': 335, 'P30(e1,e2)': 336, 'P31(e1,e2)': 337, 'P1560(e1,e2)': 338, 'P69(e1,e2)': 339, 'P86(e1,e2)': 340, 'P972(e1,e2)': 341, 'P2341(e1,e2)': 342, 'P927(e1,e2)': 343, 'P1414(e1,e2)': 344}

#352birectlabelsMapping = {'P131(e1,e2)': 0, 'P658(e1,e2)': 1, 'P1479(e1,e2)': 2, 'P1429(e1,e2)': 3, 'P140(e1,e2)': 4, 'P611(e1,e2)': 5, 'P915(e1,e2)': 6, 'P289(e1,e2)': 7, 'P669(e1,e2)': 8, 'P2578(e1,e2)': 9, 'P1081(e1,e2)': 10, 'P135(e1,e2)': 11, 'P449(e1,e2)': 12, 'P880(e1,e2)': 13, 'P1192(e1,e2)': 14, 'P413(e1,e2)': 15, 'P512(e1,e2)': 16, 'C1(e1,e2)': 17, 'P163(e1,e2)': 18, 'P47(e1,e2)': 19, 'P466(e1,e2)': 20, 'P21(e1,e2)': 21, 'P2670(e1,e2)': 22, 'P376(e1,e2)': 23, 'P189(e1,e2)': 24, 'P553(e1,e2)': 25, 'P500(e1,e2)': 26, 'P788(e1,e2)': 27, 'P2389(e1,e2)': 28, 'P272(e1,e2)': 29, 'P54(e1,e2)': 30, 'P868(e1,e2)': 31, 'P1072(e1,e2)': 32, 'P178(e1,e2)': 33, 'P27(e1,e2)': 34, 'P1071(e1,e2)': 35, 'P37(e1,e2)': 36, 'P1531(e1,e2)': 37, 'P1906(e1,e2)': 38, 'P35(e1,e2)': 39, 'P121(e1,e2)': 40, 'P0(e1,e2)': 41, 'P1142(e1,e2)': 42, 'P2152(e1,e2)': 43, 'P461(e1,e2)': 44, 'P570(e1,e2)': 45, 'P735(e1,e2)': 46, 'P411(e1,e2)': 47, 'P504(e1,e2)': 48, 'P57(e1,e2)': 49, 'P1382(e1,e2)': 50, 'P287(e1,e2)': 51, 'P106(e1,e2)': 52, 'P567(e1,e2)': 53, 'P2348(e1,e2)': 54, 'P134(e1,e2)': 55, 'P790(e1,e2)': 56, 'P81(e1,e2)': 57, 'P523(e1,e2)': 58, 'P509(e1,e2)': 59, 'P425(e1,e2)': 60, 'P991(e1,e2)': 61, 'P366(e1,e2)': 62, 'P1399(e1,e2)': 63, 'P467(e1,e2)': 64, 'P1269(e1,e2)': 65, 'P184(e1,e2)': 66, 'P91(e1,e2)': 67, 'P144(e1,e2)': 68, 'P450(e1,e2)': 69, 'P1582(e1,e2)': 70, 'P780(e1,e2)': 71, 'P399(e1,e2)': 72, 'P166(e1,e2)': 73, 'P169(e1,e2)': 74, 'P406(e1,e2)': 75, 'P2505(e1,e2)': 76, 'P306(e1,e2)': 77, 'P2596(e1,e2)': 78, 'P159(e1,e2)': 79, 'P726(e1,e2)': 80, 'P547(e1,e2)': 81, 'P706(e1,e2)': 82, 'P361(e1,e2)': 83, 'P703(e1,e2)': 84, 'P460(e1,e2)': 85, 'P469(e1,e2)': 86, 'P1050(e1,e2)': 87, 'P170(e1,e2)': 88, 'P1365(e1,e2)': 89, 'P750(e1,e2)': 90, 'P708(e1,e2)': 91, 'P183(e1,e2)': 92, 'P206(e1,e2)': 93, 'P276(e1,e2)': 94, 'P157(e1,e2)': 95, 'P1158(e1,e2)': 96, 'P1056(e1,e2)': 97, 'P1478(e1,e2)': 98, 'P123(e1,e2)': 99, 'P1619(e1,e2)': 100, 'P2155(e1,e2)': 101, 'P437(e1,e2)': 102, 'P1165(e1,e2)': 103, 'P1313(e1,e2)': 104, 'P138(e1,e2)': 105, 'P768(e1,e2)': 106, 'P412(e1,e2)': 107, 'P676(e1,e2)': 108, 'P1344(e1,e2)': 109, 'P1995(e1,e2)': 110, 'P1064(e1,e2)': 111, 'P199(e1,e2)': 112, 'P1962(e1,e2)': 113, 'P190(e1,e2)': 114, 'P2289(e1,e2)': 115, 'P186(e1,e2)': 116, 'P562(e1,e2)': 117, 'P277(e1,e2)': 118, 'P569(e1,e2)': 119, 'P286(e1,e2)': 120, 'P737(e1,e2)': 121, 'P517(e1,e2)': 122, 'P1312(e1,e2)': 123, 'P1040(e1,e2)': 124, 'P770(e1,e2)': 125, 'P119(e1,e2)': 126, 'P149(e1,e2)': 127, 'P1434(e1,e2)': 128, 'P647(e1,e2)': 129, 'P1302(e1,e2)': 130, 'P84(e1,e2)': 131, 'P740(e1,e2)': 132, 'P1181(e1,e2)': 133, 'P1416(e1,e2)': 134, 'P208(e1,e2)': 135, 'P831(e1,e2)': 136, 'P98(e1,e2)': 137, 'P1420(e1,e2)': 138, 'P1431(e1,e2)': 139, 'P101(e1,e2)': 140, 'P629(e1,e2)': 141, 'P1322(e1,e2)': 142, 'P407(e1,e2)': 143, 'P734(e1,e2)': 144, 'P291(e1,e2)': 145, 'P126(e1,e2)': 146, 'P17(e1,e2)': 147, 'P1411(e1,e2)': 148, 'P85(e1,e2)': 149, 'P1268(e1,e2)': 150, 'P1731(e1,e2)': 151, 'P1532(e1,e2)': 152, 'P58(e1,e2)': 153, 'P355(e1,e2)': 154, 'P541(e1,e2)': 155, 'P127(e1,e2)': 156, 'P375(e1,e2)': 157, 'P619(e1,e2)': 158, 'P38(e1,e2)': 159, 'P403(e1,e2)': 160, 'P2512(e1,e2)': 161, 'P559(e1,e2)': 162, 'P1027(e1,e2)': 163, 'P501(e1,e2)': 164, 'P913(e1,e2)': 165, 'C2(e1,e2)': 166, 'P175(e1,e2)': 167, 'P194(e1,e2)': 168, 'P610(e1,e2)': 169, 'P2098(e1,e2)': 170, 'P1408(e1,e2)': 171, 'P729(e1,e2)': 172, 'P180(e1,e2)': 173, 'P1317(e1,e2)': 174, 'P1068(e1,e2)': 175, 'P825(e1,e2)': 176, 'P112(e1,e2)': 177, 'P1455(e1,e2)': 178, 'P551(e1,e2)': 179, 'P2632(e1,e2)': 180, 'P822(e1,e2)': 181, 'P1249(e1,e2)': 182, 'P688(e1,e2)': 183, 'P408(e1,e2)': 184, 'P92(e1,e2)': 185, 'P150(e1,e2)': 186, 'P612(e1,e2)': 187, 'P1990(e1,e2)': 188, 'P767(e1,e2)': 189, 'P2286(e1,e2)': 190, 'P495(e1,e2)': 191, 'P136(e1,e2)': 192, 'P1074(e1,e2)': 193, 'P530(e1,e2)': 194, 'P155(e1,e2)': 195, 'P870(e1,e2)': 196, 'P2416(e1,e2)': 197, 'P945(e1,e2)': 198, 'P2079(e1,e2)': 199, 'P400(e1,e2)': 200, 'P516(e1,e2)': 201, 'P1346(e1,e2)': 202, 'P196(e1,e2)': 203, 'P730(e1,e2)': 204, 'P172(e1,e2)': 205, 'P282(e1,e2)': 206, 'P20(e1,e2)': 207, 'P1889(e1,e2)': 208, 'P87(e1,e2)': 209, 'P941(e1,e2)': 210, 'P115(e1,e2)': 211, 'P114(e1,e2)': 212, 'P769(e1,e2)': 213, 'P826(e1,e2)': 214, 'P609(e1,e2)': 215, 'P1001(e1,e2)': 216, 'P88(e1,e2)': 217, 'P414(e1,e2)': 218, 'P655(e1,e2)': 219, 'P1851(e1,e2)': 220, 'P2541(e1,e2)': 221, 'P1363(e1,e2)': 222, 'P577(e1,e2)': 223, 'P684(e1,e2)': 224, 'P66(e1,e2)': 225, 'P263(e1,e2)': 226, 'P1875(e1,e2)': 227, 'P50(e1,e2)': 228, 'P921(e1,e2)': 229, 'P620(e1,e2)': 230, 'P1885(e1,e2)': 231, 'P2633(e1,e2)': 232, 'P1809(e1,e2)': 233, 'P1589(e1,e2)': 234, 'P807(e1,e2)': 235, 'P748(e1,e2)': 236, 'P61(e1,e2)': 237, 'P1557(e1,e2)': 238, 'P197(e1,e2)': 239, 'P1191(e1,e2)': 240, 'P1654(e1,e2)': 241, 'P885(e1,e2)': 242, 'P1891(e1,e2)': 243, 'P1327(e1,e2)': 244, 'P344(e1,e2)': 245, 'P828(e1,e2)': 246, 'P110(e1,e2)': 247, 'P452(e1,e2)': 248, 'P36(e1,e2)': 249, 'P832(e1,e2)': 250, 'P1383(e1,e2)': 251, 'P427(e1,e2)': 252, 'P122(e1,e2)': 253, 'P1308(e1,e2)': 254, 'P1433(e1,e2)': 255, 'P241(e1,e2)': 256, 'P111(e1,e2)': 257, 'P840(e1,e2)': 258, 'P141(e1,e2)': 259, 'P209(e1,e2)': 260, 'P1057(e1,e2)': 261, 'P2293(e1,e2)': 262, 'P1018(e1,e2)': 263, 'P1303(e1,e2)': 264, 'P103(e1,e2)': 265, 'P618(e1,e2)': 266, 'P6(e1,e2)': 267, 'P931(e1,e2)': 268, 'P162(e1,e2)': 269, 'P571(e1,e2)': 270, 'P59(e1,e2)': 271, 'P108(e1,e2)': 272, 'P765(e1,e2)': 273, 'P1811(e1,e2)': 274, 'P575(e1,e2)': 275, 'P1336(e1,e2)': 276, 'P802(e1,e2)': 277, 'P205(e1,e2)': 278, 'P415(e1,e2)': 279, 'P485(e1,e2)': 280, 'C3(e1,e2)': 281, 'P371(e1,e2)': 282, 'P1622(e1,e2)': 283, 'P410(e1,e2)': 284, 'P421(e1,e2)': 285, 'P39(e1,e2)': 286, 'P1038(e1,e2)': 287, 'P195(e1,e2)': 288, 'P397(e1,e2)': 289, 'P607(e1,e2)': 290, 'P641(e1,e2)': 291, 'P681(e1,e2)': 292, 'P113(e1,e2)': 293, 'P463(e1,e2)': 294, 'P1535(e1,e2)': 295, 'P179(e1,e2)': 296, 'P800(e1,e2)': 297, 'P118(e1,e2)': 298, 'P533(e1,e2)': 299, 'P457(e1,e2)': 300, 'P1574(e1,e2)': 301, 'P279(e1,e2)': 302, 'P201(e1,e2)': 303, 'P1547(e1,e2)': 304, 'P177(e1,e2)': 305, 'P1552(e1,e2)': 306, 'P793(e1,e2)': 307, 'P2184(e1,e2)': 308, 'P102(e1,e2)': 309, 'P275(e1,e2)': 310, 'P462(e1,e2)': 311, 'P725(e1,e2)': 312, 'P97(e1,e2)': 313, 'P360(e1,e2)': 314, 'P1196(e1,e2)': 315, 'P451(e1,e2)': 316, 'P1571(e1,e2)': 317, 'P1080(e1,e2)': 318, 'P1462(e1,e2)': 319, 'P176(e1,e2)': 320, 'P417(e1,e2)': 321, 'P19(e1,e2)': 322, 'P522(e1,e2)': 323, 'P264(e1,e2)': 324, 'P1435(e1,e2)': 325, 'P1049(e1,e2)': 326, 'P16(e1,e2)': 327, 'P200(e1,e2)': 328, 'P1389(e1,e2)': 329, 'P53(e1,e2)': 330, 'P664(e1,e2)': 331, 'P2546(e1,e2)': 332, 'P689(e1,e2)': 333, 'P937(e1,e2)': 334, 'P237(e1,e2)': 335, 'P30(e1,e2)': 336, 'P31(e1,e2)': 337, 'P1560(e1,e2)': 338, 'P69(e1,e2)': 339, 'P86(e1,e2)': 340, 'P972(e1,e2)': 341, 'P2341(e1,e2)': 342, 'P927(e1,e2)': 343, 'P1414(e1,e2)': 344, 'P131(e2,e1)': 345, 'P658(e2,e1)': 346, 'P1479(e2,e1)': 347, 'P1429(e2,e1)': 348, 'P140(e2,e1)': 349, 'P611(e2,e1)': 350, 'P915(e2,e1)': 351, 'P289(e2,e1)': 352, 'P669(e2,e1)': 353, 'P2578(e2,e1)': 354, 'P1081(e2,e1)': 355, 'P135(e2,e1)': 356, 'P449(e2,e1)': 357, 'P880(e2,e1)': 358, 'P1192(e2,e1)': 359, 'P413(e2,e1)': 360, 'P512(e2,e1)': 361, 'C1(e2,e1)': 362, 'P163(e2,e1)': 363, 'P47(e2,e1)': 364, 'P466(e2,e1)': 365, 'P21(e2,e1)': 366, 'P2670(e2,e1)': 367, 'P376(e2,e1)': 368, 'P189(e2,e1)': 369, 'P553(e2,e1)': 370, 'P500(e2,e1)': 371, 'P788(e2,e1)': 372, 'P2389(e2,e1)': 373, 'P272(e2,e1)': 374, 'P54(e2,e1)': 375, 'P868(e2,e1)': 376, 'P1072(e2,e1)': 377, 'P178(e2,e1)': 378, 'P27(e2,e1)': 379, 'P1071(e2,e1)': 380, 'P37(e2,e1)': 381, 'P1531(e2,e1)': 382, 'P1906(e2,e1)': 383, 'P35(e2,e1)': 384, 'P121(e2,e1)': 385, 'P0(e2,e1)': 386, 'P1142(e2,e1)': 387, 'P2152(e2,e1)': 388, 'P461(e2,e1)': 389, 'P570(e2,e1)': 390, 'P735(e2,e1)': 391, 'P411(e2,e1)': 392, 'P504(e2,e1)': 393, 'P57(e2,e1)': 394, 'P1382(e2,e1)': 395, 'P287(e2,e1)': 396, 'P106(e2,e1)': 397, 'P567(e2,e1)': 398, 'P2348(e2,e1)': 399, 'P134(e2,e1)': 400, 'P790(e2,e1)': 401, 'P81(e2,e1)': 402, 'P523(e2,e1)': 403, 'P509(e2,e1)': 404, 'P425(e2,e1)': 405, 'P991(e2,e1)': 406, 'P366(e2,e1)': 407, 'P1399(e2,e1)': 408, 'P467(e2,e1)': 409, 'P1269(e2,e1)': 410, 'P184(e2,e1)': 411, 'P91(e2,e1)': 412, 'P144(e2,e1)': 413, 'P450(e2,e1)': 414, 'P1582(e2,e1)': 415, 'P780(e2,e1)': 416, 'P399(e2,e1)': 417, 'P166(e2,e1)': 418, 'P169(e2,e1)': 419, 'P406(e2,e1)': 420, 'P2505(e2,e1)': 421, 'P306(e2,e1)': 422, 'P2596(e2,e1)': 423, 'P159(e2,e1)': 424, 'P726(e2,e1)': 425, 'P547(e2,e1)': 426, 'P706(e2,e1)': 427, 'P361(e2,e1)': 428, 'P703(e2,e1)': 429, 'P460(e2,e1)': 430, 'P469(e2,e1)': 431, 'P1050(e2,e1)': 432, 'P170(e2,e1)': 433, 'P1365(e2,e1)': 434, 'P750(e2,e1)': 435, 'P708(e2,e1)': 436, 'P183(e2,e1)': 437, 'P206(e2,e1)': 438, 'P276(e2,e1)': 439, 'P157(e2,e1)': 440, 'P1158(e2,e1)': 441, 'P1056(e2,e1)': 442, 'P1478(e2,e1)': 443, 'P123(e2,e1)': 444, 'P1619(e2,e1)': 445, 'P2155(e2,e1)': 446, 'P437(e2,e1)': 447, 'P1165(e2,e1)': 448, 'P1313(e2,e1)': 449, 'P138(e2,e1)': 450, 'P768(e2,e1)': 451, 'P412(e2,e1)': 452, 'P676(e2,e1)': 453, 'P1344(e2,e1)': 454, 'P1995(e2,e1)': 455, 'P1064(e2,e1)': 456, 'P199(e2,e1)': 457, 'P1962(e2,e1)': 458, 'P190(e2,e1)': 459, 'P2289(e2,e1)': 460, 'P186(e2,e1)': 461, 'P562(e2,e1)': 462, 'P277(e2,e1)': 463, 'P569(e2,e1)': 464, 'P286(e2,e1)': 465, 'P737(e2,e1)': 466, 'P517(e2,e1)': 467, 'P1312(e2,e1)': 468, 'P1040(e2,e1)': 469, 'P770(e2,e1)': 470, 'P119(e2,e1)': 471, 'P149(e2,e1)': 472, 'P1434(e2,e1)': 473, 'P647(e2,e1)': 474, 'P1302(e2,e1)': 475, 'P84(e2,e1)': 476, 'P740(e2,e1)': 477, 'P1181(e2,e1)': 478, 'P1416(e2,e1)': 479, 'P208(e2,e1)': 480, 'P831(e2,e1)': 481, 'P98(e2,e1)': 482, 'P1420(e2,e1)': 483, 'P1431(e2,e1)': 484, 'P101(e2,e1)': 485, 'P629(e2,e1)': 486, 'P1322(e2,e1)': 487, 'P407(e2,e1)': 488, 'P734(e2,e1)': 489, 'P291(e2,e1)': 490, 'P126(e2,e1)': 491, 'P17(e2,e1)': 492, 'P1411(e2,e1)': 493, 'P85(e2,e1)': 494, 'P1268(e2,e1)': 495, 'P1731(e2,e1)': 496, 'P1532(e2,e1)': 497, 'P58(e2,e1)': 498, 'P355(e2,e1)': 499, 'P541(e2,e1)': 500, 'P127(e2,e1)': 501, 'P375(e2,e1)': 502, 'P619(e2,e1)': 503, 'P38(e2,e1)': 504, 'P403(e2,e1)': 505, 'P2512(e2,e1)': 506, 'P559(e2,e1)': 507, 'P1027(e2,e1)': 508, 'P501(e2,e1)': 509, 'P913(e2,e1)': 510, 'C2(e2,e1)': 511, 'P175(e2,e1)': 512, 'P194(e2,e1)': 513, 'P610(e2,e1)': 514, 'P2098(e2,e1)': 515, 'P1408(e2,e1)': 516, 'P729(e2,e1)': 517, 'P180(e2,e1)': 518, 'P1317(e2,e1)': 519, 'P1068(e2,e1)': 520, 'P825(e2,e1)': 521, 'P112(e2,e1)': 522, 'P1455(e2,e1)': 523, 'P551(e2,e1)': 524, 'P2632(e2,e1)': 525, 'P822(e2,e1)': 526, 'P1249(e2,e1)': 527, 'P688(e2,e1)': 528, 'P408(e2,e1)': 529, 'P92(e2,e1)': 530, 'P150(e2,e1)': 531, 'P612(e2,e1)': 532, 'P1990(e2,e1)': 533, 'P767(e2,e1)': 534, 'P2286(e2,e1)': 535, 'P495(e2,e1)': 536, 'P136(e2,e1)': 537, 'P1074(e2,e1)': 538, 'P530(e2,e1)': 539, 'P155(e2,e1)': 540, 'P870(e2,e1)': 541, 'P2416(e2,e1)': 542, 'P945(e2,e1)': 543, 'P2079(e2,e1)': 544, 'P400(e2,e1)': 545, 'P516(e2,e1)': 546, 'P1346(e2,e1)': 547, 'P196(e2,e1)': 548, 'P730(e2,e1)': 549, 'P172(e2,e1)': 550, 'P282(e2,e1)': 551, 'P20(e2,e1)': 552, 'P1889(e2,e1)': 553, 'P87(e2,e1)': 554, 'P941(e2,e1)': 555, 'P115(e2,e1)': 556, 'P114(e2,e1)': 557, 'P769(e2,e1)': 558, 'P826(e2,e1)': 559, 'P609(e2,e1)': 560, 'P1001(e2,e1)': 561, 'P88(e2,e1)': 562, 'P414(e2,e1)': 563, 'P655(e2,e1)': 564, 'P1851(e2,e1)': 565, 'P2541(e2,e1)': 566, 'P1363(e2,e1)': 567, 'P577(e2,e1)': 568, 'P684(e2,e1)': 569, 'P66(e2,e1)': 570, 'P263(e2,e1)': 571, 'P1875(e2,e1)': 572, 'P50(e2,e1)': 573, 'P921(e2,e1)': 574, 'P620(e2,e1)': 575, 'P1885(e2,e1)': 576, 'P2633(e2,e1)': 577, 'P1809(e2,e1)': 578, 'P1589(e2,e1)': 579, 'P807(e2,e1)': 580, 'P748(e2,e1)': 581, 'P61(e2,e1)': 582, 'P1557(e2,e1)': 583, 'P197(e2,e1)': 584, 'P1191(e2,e1)': 585, 'P1654(e2,e1)': 586, 'P885(e2,e1)': 587, 'P1891(e2,e1)': 588, 'P1327(e2,e1)': 589, 'P344(e2,e1)': 590, 'P828(e2,e1)': 591, 'P110(e2,e1)': 592, 'P452(e2,e1)': 593, 'P36(e2,e1)': 594, 'P832(e2,e1)': 595, 'P1383(e2,e1)': 596, 'P427(e2,e1)': 597, 'P122(e2,e1)': 598, 'P1308(e2,e1)': 599, 'P1433(e2,e1)': 600, 'P241(e2,e1)': 601, 'P111(e2,e1)': 602, 'P840(e2,e1)': 603, 'P141(e2,e1)': 604, 'P209(e2,e1)': 605, 'P1057(e2,e1)': 606, 'P2293(e2,e1)': 607, 'P1018(e2,e1)': 608, 'P1303(e2,e1)': 609, 'P103(e2,e1)': 610, 'P618(e2,e1)': 611, 'P6(e2,e1)': 612, 'P931(e2,e1)': 613, 'P162(e2,e1)': 614, 'P571(e2,e1)': 615, 'P59(e2,e1)': 616, 'P108(e2,e1)': 617, 'P765(e2,e1)': 618, 'P1811(e2,e1)': 619, 'P575(e2,e1)': 620, 'P1336(e2,e1)': 621, 'P802(e2,e1)': 622, 'P205(e2,e1)': 623, 'P415(e2,e1)': 624, 'P485(e2,e1)': 625, 'C3(e2,e1)': 626, 'P371(e2,e1)': 627, 'P1622(e2,e1)': 628, 'P410(e2,e1)': 629, 'P421(e2,e1)': 630, 'P39(e2,e1)': 631, 'P1038(e2,e1)': 632, 'P195(e2,e1)': 633, 'P397(e2,e1)': 634, 'P607(e2,e1)': 635, 'P641(e2,e1)': 636, 'P681(e2,e1)': 637, 'P113(e2,e1)': 638, 'P463(e2,e1)': 639, 'P1535(e2,e1)': 640, 'P179(e2,e1)': 641, 'P800(e2,e1)': 642, 'P118(e2,e1)': 643, 'P533(e2,e1)': 644, 'P457(e2,e1)': 645, 'P1574(e2,e1)': 646, 'P279(e2,e1)': 647, 'P201(e2,e1)': 648, 'P1547(e2,e1)': 649, 'P177(e2,e1)': 650, 'P1552(e2,e1)': 651, 'P793(e2,e1)': 652, 'P2184(e2,e1)': 653, 'P102(e2,e1)': 654, 'P275(e2,e1)': 655, 'P462(e2,e1)': 656, 'P725(e2,e1)': 657, 'P97(e2,e1)': 658, 'P360(e2,e1)': 659, 'P1196(e2,e1)': 660, 'P451(e2,e1)': 661, 'P1571(e2,e1)': 662, 'P1080(e2,e1)': 663, 'P1462(e2,e1)': 664, 'P176(e2,e1)': 665, 'P417(e2,e1)': 666, 'P19(e2,e1)': 667, 'P522(e2,e1)': 668, 'P264(e2,e1)': 669, 'P1435(e2,e1)': 670, 'P1049(e2,e1)': 671, 'P16(e2,e1)': 672, 'P200(e2,e1)': 673, 'P1389(e2,e1)': 674, 'P53(e2,e1)': 675, 'P664(e2,e1)': 676, 'P2546(e2,e1)': 677, 'P689(e2,e1)': 678, 'P937(e2,e1)': 679, 'P237(e2,e1)': 680, 'P30(e2,e1)': 681, 'P31(e2,e1)': 682, 'P1560(e2,e1)': 683, 'P69(e2,e1)': 684, 'P86(e2,e1)': 685, 'P972(e2,e1)': 686, 'P2341(e2,e1)': 687, 'P927(e2,e1)': 688, 'P1414(e2,e1)': 689}

#labelsMapping={'P106(e1,e2)':0,'P39(e1,e2)':1,'P27(e1,e2)':2,'P40(e1,e2)':3}
words = {}
maxSentenceLen = [0,0]


distanceMapping = {'PADDING': 0, 'LowerMin': 1, 'GreaterMax': 2}
minDistance = -30
maxDistance = 30
for dis in range(minDistance,maxDistance+1):
    distanceMapping[dis] = len(distanceMapping)



def createMatrices(file, word2Idx, maxSentenceLen=100):
    """Creates matrices for the events and sentence for the given file"""
    labels = []
    positionMatrix1 = []
    positionMatrix2 = []
    tokenMatrix = []
    
    for line in open(file):
        splits = line.strip().split('\t')
        
        label = splits[0]
        pos1 = splits[1]
        pos2 = splits[2]
        sentence = splits[3]
        tokens = sentence.split(" ")
        
       

        
        tokenIds = np.zeros(maxSentenceLen)
        positionValues1 = np.zeros(maxSentenceLen)
        positionValues2 = np.zeros(maxSentenceLen)
        
        for idx in range(0, min(maxSentenceLen, len(tokens))):
            tokenIds[idx] = getWordIdx(tokens[idx], word2Idx)
            
            distance1 = idx - int(pos1)
            distance2 = idx - int(pos2)
            
            if distance1 in distanceMapping:
                positionValues1[idx] = distanceMapping[distance1]
            elif distance1 <= minDistance:
                positionValues1[idx] = distanceMapping['LowerMin']
            else:
                positionValues1[idx] = distanceMapping['GreaterMax']
                
            if distance2 in distanceMapping:
                positionValues2[idx] = distanceMapping[distance2]
            elif distance2 <= minDistance:
                positionValues2[idx] = distanceMapping['LowerMin']
            else:
                positionValues2[idx] = distanceMapping['GreaterMax']
            
        tokenMatrix.append(tokenIds)
        positionMatrix1.append(positionValues1)
        positionMatrix2.append(positionValues2)
        
        labels.append(labelsMapping[label])
        

    
    return np.array(labels, dtype='int32'), np.array(tokenMatrix, dtype='int32'), np.array(positionMatrix1, dtype='int32'), np.array(positionMatrix2, dtype='int32'),
        
        
        
 
def getWordIdx(token, word2Idx): 
    """Returns from the word2Idex table the word index for a given token"""       
    if token in word2Idx:
        return word2Idx[token]
    elif token.lower() in word2Idx:
        return word2Idx[token.lower()]
    
    return word2Idx["UNKNOWN_TOKEN"]



for fileIdx in range(len(files)):
    file = files[fileIdx]
    for line in open(file):
        splits = line.strip().split('\t')
        
        label = splits[0]
        
        
        sentence = splits[3]        
        tokens = sentence.split(" ")
        maxSentenceLen[fileIdx] = max(maxSentenceLen[fileIdx], len(tokens))
        for token in tokens:
            words[token.lower()] = True
            

print("Max Sentence Lengths: ", maxSentenceLen)
        
# :: Read in word embeddings ::
# :: Read in word embeddings ::
word2Idx = {}
wordEmbeddings = []

# :: Downloads the embeddings from the York webserver ::
if not os.path.isfile(embeddingsPath):
    basename = os.path.basename(embeddingsPath)
    if basename == 'wiki_extvec.gz':
           print("Start downloading word embeddings for English using wget ...")
           #os.system("wget https://www.cs.york.ac.uk/nlp/extvec/"+basename+" -P embeddings/")
           os.system("wget https://public.ukp.informatik.tu-darmstadt.de/reimers/2017_english_embeddings/"+basename+" -P embeddings/")
    else:
        print(embeddingsPath, "does not exist. Please provide pre-trained embeddings")
        exit()
        
# :: Load the pre-trained embeddings file ::
fEmbeddings = gzip.open(embeddingsPath, "r") if embeddingsPath.endswith('.gz') else open(embeddingsPath, encoding="utf8")
	
print("Load pre-trained embeddings file")
for line in fEmbeddings:
    split = line.decode('utf-8').strip().split(" ")
    word = split[0]
    
    if len(word2Idx) == 0: #Add padding+unknown
        word2Idx["PADDING_TOKEN"] = len(word2Idx)
        vector = np.zeros(len(split)-1) #Zero vector vor 'PADDING' word
        wordEmbeddings.append(vector)
        
        word2Idx["UNKNOWN_TOKEN"] = len(word2Idx)
        vector = np.random.uniform(-0.25, 0.25, len(split)-1)
        wordEmbeddings.append(vector)

    if word.lower() in words:
        vector = np.array([float(num) for num in split[1:]])
        wordEmbeddings.append(vector)
        word2Idx[word] = len(word2Idx)
       
        
wordEmbeddings = np.array(wordEmbeddings)

print("Embeddings shape: ", wordEmbeddings.shape)
print("Len words: ", len(words))



# :: Create token matrix ::
train_set = createMatrices(files[0], word2Idx, max(maxSentenceLen))
test_set = createMatrices(files[1], word2Idx, max(maxSentenceLen))



# train_set = createMatrices(files[0], word2Idx, 9621)
# test_set = createMatrices(files[1], word2Idx,9621)


# print("train set:\t"+np.shape(train_set))

np.save(outputFilePath+'wordEmbeddings',wordEmbeddings)
np.save(outputFilePath+'word2Idx',word2Idx)
np.save(outputFilePath+'train_set1',train_set[0])
np.save(outputFilePath+'train_set2', np.array(train_set[1:]))


np.save(outputFilePath+'test_set1',test_set[0])
np.save(outputFilePath+'test_set2',np.array(test_set[1:]))


data = {'word2Idx': word2Idx}

f = gzip.open("ADE-corpus/sem-relations.pkl.gz", 'wb')
pkl.dump(data, f)
f.close()


'''
data = {'wordEmbeddings': wordEmbeddings, 'word2Idx': word2Idx, 
        'train_set': train_set, 'test_set': test_set}

f = gzip.open(outputFilePath, 'wb')
pkl.dump(data, f)
f.close()

'''

#print("Data stored in pkl folder")
print("data stored in ADE-corpus")
        
        
